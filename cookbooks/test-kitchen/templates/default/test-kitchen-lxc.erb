#!/usr/bin/ruby1.8
require 'rubygems'
require 'json'
require 'toft'

module TestKitchen
  module LXC
    class Container

      include Toft
      Toft.cookbook_path = '/vagrant/cookbooks'

      def add_project_mount(node_name)
        FileUtils.mkdir_p "/var/lib/lxc/#{node_name}/rootfs<%= @project['source_root'] %>"
        open("/var/lib/lxc/#{node_name}/fstab", 'a') do |f|
          f.puts "<%= @project['source_root'] %> /var/lib/lxc/#{node_name}/rootfs<%= @project['source_root'] %> none bind 0 0"
        end
      end

      def remove_run_list(dna_input, dna_output)
        tk_atts = JSON.parse(File.read(dna_input))
        tk_atts.delete 'run_list'
        File.open(dna_output, 'w') {|f| f.write(JSON.pretty_generate(tk_atts)) }
      end

      def add_user(node, user_name)
        node.run_ssh "id -u #{user_name} &>/dev/null || useradd -U -m #{user_name}"
      end

      def provision(node_name, json_path)
        node = create_node(node_name, {:type => node_name})
        add_project_mount(node_name)
        node.start
        puts node.ip
        add_user(node, '<%= @test_user %>')
        node.run_ssh 'mkdir -p /tmp/chef-file-cache'
        node.run_chef <%= @run_list %>, {:json => json_path}
      end

    end

    command, node_name = ARGV[0..1]
    container = Container.new
    case command
      when 'provision'
        container.remove_run_list('/vagrant/.cache/dna.json', '/vagrant/.cache/lxc-dna.json')
        container.provision(node_name, '/vagrant/.cache/lxc-dna.json')
      when 'run'
        ssh_cmd = ARGV[2]
        node = container.create_node(node_name, {:type => node_name})
        node.run_ssh ssh_cmd
      end
    #node.destroy

  end
end
